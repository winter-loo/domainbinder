#!/usr/bin/env python3
# -*- coding: utf-8 -*-

#
# Contents of config.py
#
# secret_key = "xwb6QU7TefPvZz2rUx4rOjyzHItMQDkE"
# secret_id = "xKIDylJabSs8IBnNXRR8p58vRX5OUQ3rpzJ"
# router_login_passwd = "welcome@pi.ldd.cool:)"
# router_ip_file = "/home/ldd/domainbinder/router-ip"
# log_file = "/home/ldd/domainbinder/app.log"
#

import hmac
import hashlib
import base64
from urllib import parse, request, error
import random
import time
import config
import json
import traceback
import logging
import os
from selenium.webdriver import Chrome
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.options import Options
from pyvirtualdisplay import Display

class DnsApi:
    __api_path = "cns.api.qcloud.com/v2/index.php"

    def __init__(self, secret_key, secret_id):
        self.secret_key = secret_key
        self.secret_id = secret_id
        params = "Nonce={nonce}&SecretId={secretId}&SignatureMethod=HmacSHA256&Timestamp={timestamp}"
        nonce = random.randint(100000000, 999999999)
        now_ts = int(time.time())
        self.params = params.format(
            nonce=nonce, secretId=secret_id, timestamp=now_ts)

    def fetch(func):
        def __wrapper(self, *args, **kwargs):
            params = func(self, *args, **kwargs)
            params = "&".join(sorted(params.split("&")))

            src_str = "GET" + self.__api_path + "?" + params
            signature = base64.b64encode(hmac.new(
                self.secret_key.encode(),
                msg=src_str.encode(),
                digestmod=hashlib.sha256
            ).digest())
            signature = parse.quote_plus(signature.decode('latin-1'))

            param_map = {}
            for kv in params.split("&"):
                k, v = kv.split("=")
                param_map[k] = v
            params = parse.urlencode(param_map)

            url = "https://" + self.__api_path + "?" + params + "&Signature=" + signature
            res = request.urlopen(url).read()
            return json.loads(res.decode("utf-8"))
        return __wrapper

    @fetch
    def DomainList(self):
        return self.params + "&Action=DomainList"

    @fetch
    def RecordList(self, domain, **optionals):
        params = self.params + \
            "&domain={domain}&Action=RecordList".format(domain=domain)
        for k, v in optionals.items():
            params += '&' + k + '=' + v
        return params

    @fetch
    def RecordModify(self, fullDomain, value, recordType="A", recordLine="默认", **optionals):
        firstDotIndex = fullDomain.find(".")
        subDomain = fullDomain[0:firstDotIndex]
        domain = fullDomain[firstDotIndex+1:]

        res = self.RecordList(domain)
        if res["codeDesc"] != "Success":
            raise ValueError("wrong fullDomain value: " + fullDomain)

        def __get_record_id(res):
            for item in res["data"]["records"]:
                if subDomain == item["name"] and recordType == item["type"]:
                    return item["id"]
            return ""

        recId = __get_record_id(res)

        params = self.params + "&value=" + value + \
            "&recordLine=" + recordLine + \
            "&recordType=" + recordType + \
            "&recordId=" + str(recId) + \
            "&subDomain=" + subDomain + \
            "&domain=" + domain + \
            "&Action=RecordModify"
        for k, v in optionals.items():
            params += '&' + k + '=' + v

        return params

def HwTC7102_RouterWanIP():
    options = Options()
    options.add_argument("--headless")
    options.add_argument("--disable-gpu")
    
    web = Chrome(options=options)
    
    web.get('http://192.168.2.1/html/index.html#/login')
    
    time.sleep(1)
    
    web.find_element(By.ID, 'userpassword_ctrl').send_keys(config.router_login_passwd, Keys.ENTER)
    
    time.sleep(1)
    
    # wan ip
    el = web.find_element(By.XPATH, '//*[@id="index"]/div[3]/div/div[3]/div/div[3]/p[2]')
    wan_ip = el.text
    
    web.quit()
    return wan_ip


def update_ip():
    ip = ""
    router_ip_file = config.router_ip_file
    try:
        with open(router_ip_file) as f:
            ip = f.read().strip()
    except:
        pass

    # 获取自己的公网 IP
    # curl icanhazip.com
    # router_ip = os.popen("curl -s icanhazip.com").read().strip()
    router_ip = HwTC7102_RouterWanIP()
    logging.info("router public ip: %s, domain ip: %s", router_ip, ip)
    if router_ip != ip:
        ip = router_ip
        dns_api = DnsApi(config.secret_key, config.secret_id)
        res = dns_api.RecordModify("pi.ldd.cool", ip)
        logging.debug("%s", json.dumps(res))
        with open(router_ip_file, "w") as f:
            f.write(ip + "\n")
        logging.info("DNS A record updated")


if __name__ == "__main__":
    # chrome_webdriver need display
    display = Display(visible=0, size=(800, 600))
    display.start()

    logging.basicConfig(filename=config.log_file, level=logging.INFO, format="%(asctime)s-%(process)d-%(levelname)s => %(message)s")
    update_ip()
    display.stop()

    # Test 1
    # dns_api = DnsApi(config.secret_key, config.secret_id)
    # dns_api.DomainList()

    # dns_api.RecordList("ldd.cool")

    # res = dns_api.RecordModify("*.ldd.cool", "61.144.116.202")
    # print(res)

    # Test 2
    # rt = Router()
    # if rt.login(config.router_login_passwd):
    #     print(rt.get_ip())
